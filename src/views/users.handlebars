<h1>Registra un usuario</h1>
  <p><a href="/products">< Volver a productos</a></p>
  <form>
    first_name:
    <input type="text" name="first_name" id="first_name" /><br />
    last_name:
    <input type="text" name="last_name" id="last_name" /><br />
    email:
    <input type="text" name="email" id="email" /><br />
    age:
    <input type="number" name="age" min="0" required id="age" /><br />
    <label for="role">Selecciona el rol:</label>
    <select id="role" name="role">
        <option value="user">User</option>
        <option value="premium">Premium</option>
        <option value="admin">Admin</option>
    </select>
    <input type="submit" value="Registrar usuario" id="createUserBtn" />
  </form>
<hr />
<h2>Usuarios</h2>
{{#if (eq users.length 0)}}
  <p id="text">No hay usuarios activos</p>
  
{{else}}
  <table id="tablaUsers">
    <thead>
      <tr>
        <td><strong>Nombre</strong></td>
        <td><strong>Email</strong></td>
        <td><strong>Rol</strong></td>
        <td><strong>Modificar rol</strong></td>
        <td><strong>Eliminar</strong></td>
      </tr>
    </thead>
    <tbody id="u_tbody">
      {{#each users}}
        <tr>
          <td>{{this.first_name}} {{this.last_name}}</td>
          <td>{{this.email}}</td>
          <td>{{this.role}}</td>    
          <td><button id="btnRole" onclick="changeUserRole('{{this._id}}')">Modificar rol</button></td>
          <td><button id="btnDelUser" onclick="deleteUser('{{this._id}}')">Eliminar usuario</button></td>
        </tr>
      {{/each}}
    </tbody>
  </table>
  <button onclick="delInactiveUsers()">Eliminar usuarios inactivos</button>
{{/if}}

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  document.getElementById("createUserBtn").addEventListener("click", () => {
  event.preventDefault()
  const roleUser = document.getElementById("role")
  const body = {
    first_name: document.getElementById("first_name").value,
    last_name: document.getElementById("last_name").value,
    email: document.getElementById("email").value,
    age: document.getElementById("age").value,
    role: roleUser.value,
  };
  fetch("/api/users", {
    method: "post",
    body: JSON.stringify(body),
    headers: {
      "Content-Type": "application/json",
    },
  })
  .then((result) => result.json())
  .then((result) => {
      if (result.status === "error") throw new Error(result.error);
      socket.emit("usersUpdated");
      document.getElementById("first_name").value = "";
      document.getElementById("last_name").value = "";
      document.getElementById("email").value = "";
      document.getElementById("age").value = "";
      alert(`El usuario con email ${result.payload.email} se ha agregado con éxito`);
  })
  .catch((err) => alert(`Ocurrió un error: ${err}`));
})

delInactiveUsers = () => {
  fetch(`/api/users`, {
    method: "delete",
  })
    .then((result) => result.json())
    .then((result) => {
      if (result.status === "error") throw new Error(result.error);
      socket.emit("usersUpdated");
      alert(result.message); // "X usuarios eliminados correctamente"
    })
    .catch((err) => alert(`Ocurrió un error: ${err}`));
};

changeUserRole = (uid) => {
  if (uid === undefined) {
    alert("ID del usuario no definido. No se puede modificar.");
    return;
  }
  fetch(`/api/users/premium/${uid}`, {
    method: "get",
  })
    .then((result) => result.json())
    .then((result) => {
      if (result.status === "error") throw new Error(result.error);
      socket.emit("usersUpdated");
      alert(result.message); // "result= {"status":"success","message":"Se ha actualizado el rol del usuario"}
    })
    .catch((err) => alert(`Ocurrió un error: ${err}`));
};
deleteUser = (uid) => {
  if (uid === undefined) {
    alert("ID del usuario no definido. No se puede eliminar.");
    return;
  }
  fetch(`/api/users/${uid}`, {
    method: "delete",
  })
    .then((result) => result.json())
    .then((result) => {
      if (result.status === "error") throw new Error(result.error);
      socket.emit("usersUpdated");
      alert(result.message); // result.message = 1 usuario eliminado correctamente.
    })
    .catch((err) => alert(`Ocurrió un error: ${err}`));
};

const text = document.getElementById("text");
const tablaUsers = document.getElementById("tablaUsers");
socket.on("users", (users) => {
  if(users.length == 0) {
    text.innerHTML = `No hay usuarios activos` 
  }
  tablaUsers.innerHTML = `<tr>
    <thead>
      <tr>
        <td><strong>Nombre</strong></td>
        <td><strong>Email</strong></td>
        <td><strong>Rol</strong></td>
        <td><strong>Modificar rol</strong></td>
        <td><strong>Eliminar</strong></td>
      </tr>
    </thead>
    <tbody id="u_tbody">
    </tbody>`
  for (user of users) {
    let tr = document.createElement("tr");
    tr.innerHTML = `
          <td>${user.first_name} ${user.last_name}</td>
          <td>${user.email}</td>
          <td>${user.role}</td>
          <td><button id="btnRole" onclick="changeUserRole('${user._id}')">Modificar rol</button></td>
          <td><button id="btnDelUser" onclick="deleteUser('${user._id}')">Eliminar usuario</button></td>
          `;
    tablaUsers.getElementsByTagName("tbody")[0].appendChild(tr);
  }
})


</script>
{{!-- 
//TODO: Agregar sockets en las otras funciones ademas de post
Reformular el socket.on de la linea 128 --}}
