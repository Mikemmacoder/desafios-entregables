<h2>Products from Cart with id={{cart._id}}</h2>

<hr />
{{#if (eq cart.products.length 0)}}
  <p>No hay productos en el carrito</p>
  
{{else}}
  <table>
    <thead>
      <tr>
        <td><strong>Producto</strong></td>
        <td><strong>Descripción</strong></td>
        <td><strong>Precio</strong></td>
        <td><strong>Código</strong></td>
        <td><strong>Stock</strong></td>
        <td><strong>Cantidad</strong></td>
        <td><strong>Eliminar</strong></td>
      </tr>
    </thead>
    <tbody id="tbody">
      {{#each cart.products}}
        <tr>
          <td>{{this.product.title}}</td>
          <td>{{this.product.description}}</td>
          <td>{{this.product.price}}</td>
          <td>{{this.product.code}}</td>
          <td>{{this.product.stock}}</td>
          <td><button id="btnRest" onclick="decrementProdQuantity('{{this.product._id}}', {{this.quantity}})">-</button>
          {{this.quantity}}
          <button id="btnAdd" onclick="incrementProductQuantity('{{this.product._id}}', {{this.quantity}}, {{this.product.stock}})">+</button></td>
          <td><button id="btnDelelte" onclick="deleteProdFromCart('{{this.product._id}}')">Eliminar</button></td>
        </tr>
      {{/each}}
    </tbody>
  </table>
  <button onclick="payment()">Realizar compra</button>
{{/if}}

<a href="/products">< Volver a productos</a>

<script src="/socket.io/socket.io.js"></script>
<script>
const socketCart = io(); 
const deleteProdFromCart = (pid) => {
  const cid = {{{json cart._id}}};
  if (pid === undefined) {
    alert("ID del producto no definido. No se puede eliminar.");
    return;
  }
  if (cid === undefined) {
    alert("ID del carrito no definido.");
    return;
  }
  fetch(`/api/carts/${cid}/products/${pid}`, {
    method: "delete",
  })
    .then(response => response.json())
    .then(result => {
      if (result.status === "error") {
        throw new Error(result.error);
      }
      alert("El producto ha sido eliminado");
      socketCart.emit('productsList', cid);
    })

    .catch(err => alert(`Ocurrió un error: ${err}`));
}

const incrementProductQuantity = ( pid, quantity, stock) => { 
  if (stock > quantity) { 
    const cid = {{{json cart._id}}}
    fetch(`/api/carts/${cid}/products/${pid}`, { 
      method: 'post' 
    }) 
    .then(result => result.json()) 
    .then(result => { 
      if (result.status ==='error') throw new Error(result.error) 
        socketCart.emit('productsList', cid); 
        alert(`Se ha actualizado la cantidad de productos :)`)
      }) 
    .catch(err => alert(`Ocurrió un error :(\n${err}`)) 
  }else{
    alert(`Has alcanzado el máximo del producto`)
  }
//TODO: arreglar error. Cuando agrego 2 productos me dice que he alcanzado el limite, aun habiendo stock
}

const decrementProdQuantity = (pid, quantity) => {
  const cid = {{{json cart._id}}};
  if (quantity == 1) {
    deleteProdFromCart(pid)
    return 
  }
  const newQuantity = quantity - 1
  fetch(`/api/carts/${cid}/products/${pid}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ quantity: newQuantity }),
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error: ${response.status} - ${response.statusText}`);
      }
      return response.json();
    })
    .then(result => {
      socketCart.emit('productsList', cid);
      alert('Se ha actualizado la cantidad de productos');
    })
    .catch(error => {
      alert('Ocurrió un error:', error);
    });
};

const finalizePurchase = (req, res) => {
  const cid = {{{json cart._id}}};
  fetch(`/api/carts/${cid}/purchase`, { 
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    }
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error: ${response.status} - ${response.statusText}`);
      }
      return response.json(); 
    })
    .then(result => { 
      socketCart.emit('productsList', cid);
      const {code,amount, purchaser, purchase_datetime} = result.payload
      alert(`Compra finalizada con éxito\n Comprador: ${purchaser} \n Código de compra: ${code}\n Fecha de compra: ${purchase_datetime}\n Total: $${amount}`);
    })
};
const payment = () => {
  const cid = {{{json cart._id}}};  
  fetch(`/pay/create-checkout-session`, {
  method: 'POST',
  headers: {'Content-Type': 'application/json'},
  body: JSON.stringify({ cartId: cid })
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error: ${response.status} - ${response.statusText}`);
      }
      return response.json(); 
    })
    .then(result => { 
      //console.log(result)
      window.location.href = result.url
    })
};
/////----------Socket----------/////

socketCart.on("CartUpdated", (data) => {
  updateCartView(data)
});

const updateCartView = (data) => {
  const table = document.getElementById('tbody');
  table.innerHTML = ''; 
  for (product of data.products) {
    const row = document.createElement("tr")
    row.innerHTML = `
      <td>${product.product.title}</td>
      <td>${product.product.description}</td>
      <td>${product.product.price}</td>
      <td>${product.product.code}</td>
      <td>${product.product.stock}</td>
      <td>
        <button id="btnRest" onclick="decrementProdQuantity('${product.product._id}', ${product.quantity})">-</button>
          ${product.quantity}
          <button id="btnAdd" onclick="incrementProductQuantity('${product.product._id}', ${product.quantity}, ${product.product.stock})">+</button></td>
          <td><button id="btnDelelte" onclick="deleteProdFromCart('${product.product._id}')">Eliminar</button></td>
    `
    table.appendChild(row);
  }
}

</script>

